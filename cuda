precompile(Tuple{Type{REPL.Terminals.TTYTerminal}, String, Base.TTY, Base.PipeEndpoint, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.get), Base.PipeEndpoint, Symbol, Bool})
precompile(Tuple{typeof(Base.displaysize), Base.PipeEndpoint})
precompile(Tuple{REPL.LineEdit.var"#27#28"{REPL.LineEdit.var"#248#256", String}, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#248#256", REPL.LineEdit.MIState, REPL.LineEdit.ModeState, Any})
precompile(Tuple{typeof(Base.something), REPL.LineEdit.Prompt, REPL.LineEdit.Prompt})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, UInt8})
precompile(Tuple{typeof(Base.MainInclude.include), String})
precompile(Tuple{typeof(Base._typeddict), Base.Dict{String, Any}, Base.Dict{String, Any}, Vararg{Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.promoteK), Type, Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.promoteK), Type, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.promoteV), Type, Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.hash), String, UInt64})
precompile(Tuple{typeof(LLVMExtra_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{Type{Base.VersionNumber}, Int32, Int32, Int32})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(CUDA_Driver_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.Libc.Libdl.find_library), Array{String, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:throw_error,), Tuple{Bool}}, typeof(Base.Libc.Libdl.dlopen), String, UInt32})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:throw_error,), Tuple{Bool}}, typeof(Base.Libc.Libdl.dlopen), String})
precompile(Tuple{CUDA_Driver_jll.var"#driver_version#4", Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:throw_error,), Tuple{Bool}}, typeof(Base.Libc.Libdl.dlsym), Ptr{Nothing}, String})
precompile(Tuple{Type{Ref{Int32}}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Int32}}, Base.RefValue{Int32}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Int32}}, Base.RefValue{Int32}})
precompile(Tuple{typeof(Base.:(!=)), Int32, Int64})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Int32}})
precompile(Tuple{typeof(Base.divrem), Int32, Int64})
precompile(Tuple{typeof(Base.divrem), Int64, Int64})
precompile(Tuple{Type{Base.VersionNumber}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.Libc.Libdl.dlclose), Ptr{Nothing}})
precompile(Tuple{typeof(NVTX_jll.find_artifact_dir)})
precompile(Tuple{typeof(JuliaNVTXCallbacks_jll.find_artifact_dir)})
precompile(Tuple{Base.Threads.var"#1#2"{NVTX.var"#18#threadsfor_fun#11"{NVTX.var"#18#threadsfor_fun#9#12"{NVTX.var"#8#10", Base.UnitRange{Int64}}}, Int64}})
precompile(Tuple{typeof(AbstractFFTs.TestUtils.__init__)})
precompile(Tuple{typeof(CUDA_Driver_jll.is_available)})
precompile(Tuple{typeof(Base.Threads.nthreads)})
precompile(Tuple{typeof(Base.println), String, Int64})
precompile(Tuple{typeof(Base.println), Base.PipeEndpoint, String, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, String, Int64, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, String})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, Int64})
precompile(Tuple{typeof(Base.hash), Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, UInt64})
precompile(Tuple{typeof(Base.:(>=)), Base.VersionNumber})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.identity), typeof(Base.max)}, Type{Base.VersionNumber}})
precompile(Tuple{typeof(Base.issupbuild), Base.VersionNumber})
precompile(Tuple{typeof(Base.hash), Tuple{}, UInt64})
precompile(Tuple{typeof(Base.:(<)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(>)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(!=)), UInt32, UInt32})
precompile(Tuple{Type{NamedTuple{(:unoptimize_throw_blocks,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:inline_cost_threshold,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Type{NamedTuple{(:safepoint_on_entry,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:gcstack_arg,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{LLVM.API.LLVMOpaqueError}}, Ptr{Nothing}})
precompile(Tuple{Type{NamedTuple{(:allow_boxed,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.cconvert), Type, LLVM.API.LLVMLinkage})
precompile(Tuple{typeof(Base.cconvert), Type{UInt32}, LLVM.API.LLVMCallConv})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Nothing}})
precompile(Tuple{Type{NamedTuple{(:kernel, :name), T} where T<:Tuple}, Tuple{Bool, Nothing}})
precompile(Tuple{typeof(CUDA.threadIdx)})
precompile(Tuple{typeof(CUDA.initialize_rng_state)})
precompile(Tuple{Type{NamedTuple{(:kernel,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:optimize, :libraries, :validate), T} where T<:Tuple}, Tuple{Bool, Bool, Bool}})
precompile(Tuple{Type{NamedTuple{(:use_memory_ssa,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.convert), Type{Int64}, Int32})
precompile(Tuple{Type{NamedTuple{(:style,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:max_threads,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:name,), Tuple{Nothing}}, Tuple{Symbol}})
precompile(Tuple{CUDA.var"##s8454#1158", Vararg{Any, 7}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CUDA.var"#1159#1165", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, CUDA.var"#1159#1165"}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, CUDA.var"#1159#1165"}, Int64})
precompile(Tuple{typeof(Base.map), Base.ComposedFunction{typeof(Base.:(!)), CUDA.var"#1160#1166"}, Core.SimpleVector})
precompile(Tuple{Base.ComposedFunction{typeof(Base.:(!)), CUDA.var"#1160#1166"}, Type})
precompile(Tuple{Type{LLVM.Context}, Function})
precompile(Tuple{LLVM.var"##Context#12", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{LLVM.Context}, LLVM.Interop.var"#4#5"{DataType}})
precompile(Tuple{typeof(Base.push!), Array{LLVM.Context, 1}, LLVM.Context})
precompile(Tuple{typeof(Base.isempty), Array{LLVM.Context, 1}})
precompile(Tuple{typeof(Base.last), Array{LLVM.Context, 1}})
precompile(Tuple{typeof(Base.cconvert), Type, LLVM.Context})
precompile(Tuple{Type{LLVM.VoidType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{typeof(LLVM.API.LLVMVoidTypeInContext), LLVM.Context})
precompile(Tuple{typeof(Base.pop!), Array{LLVM.Context, 1}})
precompile(Tuple{Type{LLVM.StructType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{Type{LLVM.PointerType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{Type{LLVM.LLVMDouble}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{typeof(Base.Iterators.zip), Core.SimpleVector, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, CUDA.var"#1162#1168", Base.Iterators.Zip{Tuple{Core.SimpleVector, Array{Any, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CUDA.var"#1161#1167", Base.Iterators.Filter{CUDA.var"#1162#1168", Base.Iterators.Zip{Tuple{Core.SimpleVector, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base.collect), Type{Type}, Base.Generator{Base.Iterators.Filter{CUDA.var"#1162#1168", Base.Iterators.Zip{Tuple{Core.SimpleVector, Array{Any, 1}}}}, CUDA.var"#1161#1167"}})
precompile(Tuple{typeof(Base.Iterators.zip), NTuple{4, Expr}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, CUDA.var"#1164#1170", Base.Iterators.Zip{Tuple{NTuple{4, Expr}, Array{Any, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CUDA.var"#1163#1169", Base.Iterators.Filter{CUDA.var"#1164#1170", Base.Iterators.Zip{Tuple{NTuple{4, Expr}, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base.collect), Type{Union{Expr, Symbol}}, Base.Generator{Base.Iterators.Filter{CUDA.var"#1164#1170", Base.Iterators.Zip{Tuple{NTuple{4, Expr}, Array{Any, 1}}}}, CUDA.var"#1163#1169"}})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 1}, Symbol, Int64})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Ptr{Nothing}}}, Ptr{Ptr{Nothing}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Ptr{Nothing}}}, Ptr{Ptr{Nothing}}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Vararg{Int64}}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.prod), Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:async,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.convert), Type{Float64}, Float64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CUDA.CUPTI.var"#232#233", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.UnitRange{Int64}, CUDA.CUPTI.var"#232#233"}, Symbol})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, CUDA.CUPTI.var"#232#233"}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.cconvert), Type{UInt32}, CUDA.CUPTI.CUpti_ActivityFlag})
precompile(Tuple{typeof(Base._any_tuple), Function, Bool})
precompile(Tuple{Type{LLVM.ArrayType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{Type{LLVM.IntegerType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{typeof(Base.Iterators.zip), NTuple{8, Expr}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, CUDA.var"#1164#1170", Base.Iterators.Zip{Tuple{NTuple{8, Expr}, Array{Any, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CUDA.var"#1163#1169", Base.Iterators.Filter{CUDA.var"#1164#1170", Base.Iterators.Zip{Tuple{NTuple{8, Expr}, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base.collect), Type{Union{Expr, Symbol}}, Base.Generator{Base.Iterators.Filter{CUDA.var"#1164#1170", Base.Iterators.Zip{Tuple{NTuple{8, Expr}, Array{Any, 1}}}}, CUDA.var"#1163#1169"}})
precompile(Tuple{typeof(Base.convert), Type{CUDA.CUPTI.CUpti_ActivityKind}, CUDA.CUPTI.CUpti_ActivityKind})
precompile(Tuple{Base.var"#54#55", Type, Type})
precompile(Tuple{Type{NamedTuple{(:copycols,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{Pair{A, B} where B where A}, CUDA.CUPTI.CUpti_ActivityKind, Type})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{CUDA.CUPTI.CUpti_ActivityKind, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{CUDA.CUPTI.CUpti_ActivityKind, DataType}, Int64, Int64})
precompile(Tuple{Type{Base.KeyError}, CUDA.CUPTI.CUpti_ActivityKind})
precompile(Tuple{typeof(Base.convert), Type{Ptr{CUDA.CUPTI.CUpti_Activity}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.cconvert), Type, CUDA.CUPTI.CUpti_CallbackDomain})
precompile(Tuple{typeof(Base.unsafe_convert), Type{CUDA.CUPTI.CUpti_CallbackDomain}, CUDA.CUPTI.CUpti_CallbackDomain})
precompile(Tuple{Type{NamedTuple{(:cols,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{Pair{A, B} where B where A}, CUDA.CUPTI.CUpti_MetricValueKind, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{CUDA.CUPTI.CUpti_MetricValueKind, Symbol}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{CUDA.CUPTI.CUpti_MetricValueKind, Symbol}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:on, :order), T} where T<:Tuple}, Tuple{Symbol, Symbol}})
precompile(Tuple{DataFrames.var"#674#675", Function})
precompile(Tuple{Type{NamedTuple{(:view,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:style,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:copycols, :keeprows, :renamecols), T} where T<:Tuple}, Tuple{Bool, Bool, Bool}})
precompile(Tuple{Base.var"#288#292"{Tuple{Int64}}, Int64})
precompile(Tuple{Type{NamedTuple{(:keep,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:type,), T} where T<:Tuple}, Tuple{DataType}})
precompile(Tuple{typeof(Base.convert), Type{CUDA.CuPtr{Int64}}, CUDA.CuPtr{Nothing}})
precompile(Tuple{typeof(CUDA.CUPTI.request_buffer), Ptr{Ptr{UInt8}}, Ptr{UInt64}, Ptr{UInt64}})
precompile(Tuple{typeof(CUDA.CUPTI.complete_buffer), Ptr{CUDA.CUctx_st}, UInt32, Ptr{UInt8}, UInt64, UInt64})
precompile(Tuple{typeof(Main.stream_test)})
precompile(Tuple{Type{CUDA.CUmemPoolProps_st}, CUDA.CUmemAllocationType_enum, CUDA.CUmemAllocationHandleType_enum, CUDA.CUmemLocation_st, Ptr{Nothing}, Int64, NTuple{56, UInt8}})
precompile(Tuple{typeof(GPUCompiler.actual_compilation), Base.Dict{Any, CUDA.CuFunction}, Core.MethodInstance, UInt64, GPUCompiler.CompilerConfig{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, typeof(CUDA.compile), typeof(CUDA.link)})
precompile(Tuple{GPUCompiler.var"##JuliaContext#154", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GPUCompiler.JuliaContext), CUDA.var"#1145#1148"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}}})
precompile(Tuple{typeof(Base.push!), Array{LLVM.ThreadSafeContext, 1}, LLVM.ThreadSafeContext})
precompile(Tuple{typeof(Core.Compiler.abstract_call_known), GPUCompiler.GPUInterpreter, Any, Core.Compiler.ArgInfo, Core.Compiler.StmtInfo, Core.Compiler.InferenceState, Int64})
precompile(Tuple{typeof(Core.Compiler.builtin_tfunction), GPUCompiler.GPUInterpreter, Any, Array{Any, 1}, Core.Compiler.InferenceState})
precompile(Tuple{CUDA.var"##s8456#1015", Any, Any, Any, Type, Any})
precompile(Tuple{typeof(LLVM.API.LLVMInt32TypeInContext), LLVM.Context})
precompile(Tuple{typeof(LLVM.API.LLVMModuleCreateWithNameInContext), String, LLVM.Context})
precompile(Tuple{typeof(LLVM.API.LLVMCreateEnumAttribute), LLVM.Context, UInt32, UInt64})
precompile(Tuple{typeof(LLVM.API.LLVMCreateBuilderInContext), LLVM.Context})
precompile(Tuple{Type{LLVM.CallInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.ConstantInt}, Int32})
precompile(Tuple{typeof(LLVM.API.LLVMIntTypeInContext), LLVM.Context, Int64})
precompile(Tuple{Type{LLVM.ConstantAsMetadata}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{typeof(LLVM.API.LLVMMDNodeInContext2), LLVM.Context, Array{LLVM.Metadata, 1}, Int64})
precompile(Tuple{typeof(LLVM.API.LLVMMetadataAsValue2), LLVM.Context, LLVM.MDTuple})
precompile(Tuple{Type{LLVM.MetadataAsValue}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.API.LLVMSetMetadata2), LLVM.CallInst, LLVM.MDKind, LLVM.MetadataAsValue})
precompile(Tuple{typeof(LLVM.ret!), LLVM.IRBuilder, LLVM.CallInst})
precompile(Tuple{Type{LLVM.RetInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Core.Compiler.llvmcall_tfunc), Core.Compiler.InferenceLattice{Core.Compiler.ConditionalsLattice{Core.Compiler.PartialsLattice{Core.Compiler.ConstsLattice}}}, Any, Any, Any})
precompile(Tuple{Type{Core.CodeInstance}, GPUCompiler.GPUInterpreter, Core.Compiler.InferenceResult, Any, Core.Compiler.WorldRange})
precompile(Tuple{typeof(Base.CoreLogging.min_enabled_level), Logging.ConsoleLogger})
precompile(Tuple{typeof(Core.Compiler.from_interprocedural!), GPUCompiler.GPUInterpreter, Any, Core.Compiler.InferenceState, Core.Compiler.ArgInfo, Any})
precompile(Tuple{CUDA.var"##s8456#1059", Any})
precompile(Tuple{typeof(LLVM.Interop.create_function), LLVM.StructType})
precompile(Tuple{typeof(GPUCompiler.kernel_state_intr), LLVM.Module, LLVM.StructType})
precompile(Tuple{CUDA.var"##s8456#1058", Any, Any, Any})
precompile(Tuple{typeof(LLVM.API.LLVMInt8TypeInContext), LLVM.Context})
precompile(Tuple{typeof(LLVM.Interop.create_function), LLVM.IntegerType})
precompile(Tuple{Type{LLVM.ConstantExpr}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.ptrtoint!), LLVM.IRBuilder, LLVM.ConstantExpr, LLVM.IntegerType})
precompile(Tuple{typeof(LLVM.ret!), LLVM.IRBuilder, LLVM.ConstantExpr})
precompile(Tuple{CUDA.var"##s8456#1008", Any, Any, Any})
precompile(Tuple{typeof(Base.reinterpret), Type{UInt32}, LLVM.API.__JL_Ctag_85})
precompile(Tuple{typeof(Base.convert), Type{Ptr{LLVM.API.LLVMOpaqueMetadata}}, Ptr{Nothing}})
precompile(Tuple{LLVM.Interop.var"##s607#10", Vararg{Any, 9}})
precompile(Tuple{typeof(Base.push!), Array{LLVM.Context, 1}, LLVM.Context})
precompile(Tuple{Type{LLVM.LLVMDouble}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{Type{LLVM.IntegerType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{Type{LLVM.PointerType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{Type{LLVM.PointerType}, LLVM.LLVMDouble, Int64})
precompile(Tuple{typeof(Base.vect), LLVM.PointerType, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.PointerType, LLVM.LLVMDouble, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.LLVMType}, LLVM.PointerType, LLVM.LLVMDouble, LLVM.IntegerType})
precompile(Tuple{typeof(LLVM.API.LLVMVoidTypeInContext), LLVM.Context})
precompile(Tuple{typeof(LLVM.Interop.create_function), LLVM.VoidType, Array{LLVM.LLVMType, 1}})
precompile(Tuple{typeof(LLVM.API.LLVMModuleCreateWithNameInContext), String, LLVM.Context})
precompile(Tuple{typeof(LLVM.API.LLVMCreateEnumAttribute), LLVM.Context, UInt32, UInt64})
precompile(Tuple{typeof(LLVM.API.LLVMCreateBuilderInContext), LLVM.Context})
precompile(Tuple{Type{LLVM.BitCastInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.inbounds_gep!), LLVM.IRBuilder, LLVM.LLVMDouble, LLVM.BitCastInst, Array{LLVM.Argument, 1}})
precompile(Tuple{Type{LLVM.GetElementPtrInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.StoreInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.Interop.tbaa_addrspace), Int64})
precompile(Tuple{typeof(LLVM.API.LLVMMDStringInContext2), LLVM.Context, String, Int64})
precompile(Tuple{typeof(LLVM.API.LLVMMDNodeInContext2), LLVM.Context, Array{LLVM.MDString, 1}, Int64})
precompile(Tuple{typeof(LLVM.API.LLVMIntTypeInContext), LLVM.Context, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Metadata, 1}, LLVM.MDString, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Metadata, 1}, LLVM.MDTuple, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Metadata, 1}, LLVM.ConstantInt, Int64})
precompile(Tuple{Type{LLVM.ConstantAsMetadata}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{typeof(LLVM.API.LLVMMDNodeInContext2), LLVM.Context, Array{LLVM.Metadata, 1}, Int64})
precompile(Tuple{typeof(LLVM.API.LLVMMetadataAsValue2), LLVM.Context, LLVM.MDTuple})
precompile(Tuple{Type{LLVM.MetadataAsValue}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.API.LLVMSetMetadata2), LLVM.StoreInst, LLVM.MDKind, LLVM.MetadataAsValue})
precompile(Tuple{typeof(LLVM.alignment!), LLVM.StoreInst, Int64})
precompile(Tuple{Type{LLVM.RetInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.lastindex), Core.SimpleVector})
precompile(Tuple{typeof(Base.Iterators.enumerate), Core.SimpleVector})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Core.SimpleVector}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Core.SimpleVector}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(>)), UInt64, UInt64})
precompile(Tuple{typeof(Base.isempty), Array{LLVM.ThreadSafeContext, 1}})
precompile(Tuple{typeof(Base.last), Array{LLVM.ThreadSafeContext, 1}})
precompile(Tuple{typeof(LLVM.context), LLVM.ThreadSafeContext})
precompile(Tuple{typeof(LLVM.API.LLVMOrcCreateNewThreadSafeModule), LLVM.Module, LLVM.ThreadSafeContext})
precompile(Tuple{typeof(LLVM.tsm_callback), Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueModule}})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String, String, String, Vararg{String}})
precompile(Tuple{GPUCompiler.var"#63#66"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}}, LLVM.Module})
precompile(Tuple{typeof(Base.setindex!), LLVM.ModuleFlagDict, LLVM.ConstantAsMetadata, String, LLVM.API.LLVMModuleFlagBehavior})
precompile(Tuple{GPUCompiler.var"#lookup_fun#65"{Array{Any, 1}, Core.Compiler.WorldView{GPUCompiler.CodeCache}}, Core.MethodInstance, UInt64, UInt64})
precompile(Tuple{GPUCompiler.var"#64#67", LLVM.Module})
precompile(Tuple{typeof(GPUCompiler.ci_cache_lookup), Core.Compiler.WorldView{GPUCompiler.CodeCache}, Core.MethodInstance, UInt64, UInt64})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:ci, :func, :specfunc), Tuple{Core.CodeInstance, String, String}}, Symbol})
precompile(Tuple{typeof(LLVM.API.LLVMCreateStringAttribute), LLVM.Context, String, Int64, String, Int64})
precompile(Tuple{typeof(LLVM.name!), LLVM.Function, String})
precompile(Tuple{typeof(Base.abs), Int64})
precompile(Tuple{typeof(GPUCompiler.mangle_sig), Type})
precompile(Tuple{typeof(Base.rest), Core.SimpleVector, Int64})
precompile(Tuple{typeof(GPUCompiler.safe_name), Type{GPUArrays.var"#6#7"}})
precompile(Tuple{typeof(GPUCompiler.mangle_param), Type, Array{String, 1}})
precompile(Tuple{typeof(GPUCompiler.safe_name), DataType})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), String}, Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.string), Int64, String, Vararg{Any}})
precompile(Tuple{typeof(GPUCompiler.mangle_param), Int64, Array{String, 1}})
precompile(Tuple{typeof(Base.vect), Type{GPUArrays.var"#6#7"}, Vararg{DataType}})
precompile(Tuple{typeof(Base.length), Array{DataType, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{DataType, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.Iterators.Zip{Tuple{Array{DataType, 1}, Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{DataType, 1}, Array{Symbol, 1}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{DataType, 1}, Array{Symbol, 1}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:cc, :typ, :name, :idx), Tuple{GPUCompiler.ArgumentCC, DataType, Symbol, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:cc, :typ, :name, :idx), Tuple{GPUCompiler.ArgumentCC, DataType, Symbol, Int64}}, Symbol})
precompile(Tuple{Type{LLVM.TypeAttribute}, String, LLVM.StructType})
precompile(Tuple{typeof(LLVM.API.LLVMCreateTypeAttribute), LLVM.Context, UInt32, LLVM.StructType})
precompile(Tuple{typeof(LLVM.parameter_attributes), LLVM.Function, Int64})
precompile(Tuple{typeof(Base.vect), LLVM.ConstantExpr})
precompile(Tuple{typeof(LLVM.call!), LLVM.IRBuilder, GPUCompiler.Runtime.RuntimeMethodInstance, Array{LLVM.ConstantExpr, 1}})
precompile(Tuple{Type{LLVM.FunctionType}, LLVM.VoidType, Array{LLVM.LLVMType, 1}})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.Value}, LLVM.ConstantExpr})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Value, 1}, LLVM.ConstantExpr, Int64})
precompile(Tuple{typeof(LLVM.call!), LLVM.IRBuilder, LLVM.FunctionType, LLVM.Function, Array{LLVM.Value, 1}})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.Value}})
precompile(Tuple{typeof(GPUCompiler.emit_trap!), GPUCompiler.CompilerJob{T, P} where P where T, LLVM.IRBuilder, LLVM.Module, LLVM.CallInst})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Core.MethodInstance})
precompile(Tuple{typeof(GPUCompiler.finish_module!), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, LLVM.Module, LLVM.Function})
precompile(Tuple{typeof(GPUCompiler.finish_module!), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, P} where P, LLVM.Module, LLVM.Function})
precompile(Tuple{GPUCompiler.var"#72#78", NamedTuple{(:cc, :typ, :name, :idx), Tuple{GPUCompiler.ArgumentCC, DataType, Symbol, Nothing}}})
precompile(Tuple{GPUCompiler.var"#72#78", NamedTuple{(:cc, :typ, :name, :idx), Tuple{GPUCompiler.ArgumentCC, DataType, Symbol, Int64}}})
precompile(Tuple{GPUCompiler.var"#73#79", LLVM.EnumAttribute})
precompile(Tuple{typeof(LLVM.API.LLVMCreateTypeAttribute), LLVM.Context, UInt32, LLVM.VoidType})
precompile(Tuple{GPUCompiler.var"#73#79", LLVM.TypeAttribute})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{LLVM.GetElementPtrInst}})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.GetElementPtrInst, 1}, LLVM.GetElementPtrInst, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{LLVM.GetElementPtrInst, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Array{LLVM.Instruction, 1}}, Array{LLVM.GetElementPtrInst, 1}})
precompile(Tuple{typeof(Base.isempty), Array{LLVM.Instruction, 1}})
precompile(Tuple{typeof(Base.popfirst!), Array{LLVM.Instruction, 1}})
precompile(Tuple{Type{LLVM.LoadInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{LLVM.LoadInst}})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.LoadInst, 1}, LLVM.LoadInst, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{LLVM.LoadInst, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.append!), Array{LLVM.Instruction, 1}, Array{LLVM.LoadInst, 1}})
precompile(Tuple{typeof(LLVM.alloca!), LLVM.IRBuilder, LLVM.StructType})
precompile(Tuple{Type{LLVM.AllocaInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.addrspacecast!), LLVM.IRBuilder, LLVM.AllocaInst, LLVM.PointerType})
precompile(Tuple{Type{LLVM.AddrSpaceCastInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.push!), Array{LLVM.Value, 1}, LLVM.AddrSpaceCastInst})
precompile(Tuple{typeof(Base.push!), Array{LLVM.Value, 1}, LLVM.Argument})
precompile(Tuple{typeof(Base.getindex), Array{LLVM.Value, 1}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, LLVM.Argument, LLVM.AddrSpaceCastInst})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{LLVM.Value, LLVM.Value}, LLVM.AddrSpaceCastInst, LLVM.Argument})
precompile(Tuple{Type{Pair{A, B} where B where A}, LLVM.Argument, LLVM.Argument})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{LLVM.Value, LLVM.Value}, LLVM.Argument, LLVM.Argument})
precompile(Tuple{Type{LLVM.BrInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.replace_metadata_uses!), LLVM.Function, LLVM.ConstantExpr})
precompile(Tuple{LLVM.var"#recurse#15"{LLVM.Function, LLVM.ConstantExpr}, LLVM.NamedMDNode})
precompile(Tuple{Type{LLVM.MDTuple}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{typeof(Base._array_for), Type{LLVM.MDTuple}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{LLVM.MDTuple, 1}, LLVM.MDTuple, Base.Generator{Array{Ptr{LLVM.API.LLVMOpaqueMetadata}, 1}, LLVM.var"#26#27"}, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{LLVM.MDTuple, 1}})
precompile(Tuple{typeof(Base.getindex), Array{LLVM.MDTuple, 1}, Int64})
precompile(Tuple{LLVM.var"#recurse#15"{LLVM.Function, LLVM.ConstantExpr}, LLVM.MDTuple})
precompile(Tuple{typeof(Base._array_for), Type{LLVM.ConstantAsMetadata}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{LLVM.ConstantAsMetadata, 1}, LLVM.ConstantAsMetadata, Base.Generator{Array{Ptr{LLVM.API.LLVMOpaqueMetadata}, 1}, LLVM.var"#24#25"}, Int64})
precompile(Tuple{Type{LLVM.MDString}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{LLVM.ConstantAsMetadata, 1}, LLVM.MDString, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{LLVM.Metadata, 1}, Base.Generator{Array{Ptr{LLVM.API.LLVMOpaqueMetadata}, 1}, LLVM.var"#24#25"}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{LLVM.Metadata, 1}})
precompile(Tuple{typeof(Base.getindex), Array{LLVM.Metadata, 1}, Int64})
precompile(Tuple{Type{LLVM.Value}, LLVM.ConstantAsMetadata})
precompile(Tuple{typeof(LLVM.API.LLVMMetadataAsValue2), LLVM.Context, LLVM.ConstantAsMetadata})
precompile(Tuple{Type{LLVM.ConstantInt}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.DICompileUnit}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{typeof(Base._array_for), Type{LLVM.DICompileUnit}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{LLVM.DICompileUnit, 1}, LLVM.DICompileUnit, Base.Generator{Array{Ptr{LLVM.API.LLVMOpaqueMetadata}, 1}, LLVM.var"#26#27"}, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{LLVM.DICompileUnit, 1}})
precompile(Tuple{typeof(Base.getindex), Array{LLVM.DICompileUnit, 1}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String})
precompile(Tuple{Type{Base.Dict{GPUCompiler.CompilerJob{T, P} where P where T, String}}, Pair{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String}})
precompile(Tuple{typeof(Base.lock), GPUCompiler.var"#140#142"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}}, Base.ReentrantLock})
precompile(Tuple{typeof(LLVM.API.LLVMParseBitcodeInContext2), LLVM.Context, LLVM.MemoryBuffer, Base.RefValue{Ptr{LLVM.API.LLVMOpaqueModule}}})
precompile(Tuple{typeof(Base.vect), LLVM.Function})
precompile(Tuple{Type{LLVM.MDNode}, Array{LLVM.Function, 1}})
precompile(Tuple{typeof(Base.push!), LLVM.NamedMDNode, LLVM.MDTuple})
precompile(Tuple{typeof(LLVM.add!), GPUCompiler.var"#90#91"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, Int64}, LLVM.NewPMPassManager, LLVM.NewPMPassManager})
precompile(Tuple{typeof(LLVM.add!), GPUCompiler.var"#110#116"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}}, LLVM.NewPMPassManager, LLVM.NewPMPassManager})
precompile(Tuple{typeof(LLVM.add!), GPUCompiler.var"#113#119"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}}, LLVM.NewPMPassManager, LLVM.NewPMPassManager})
precompile(Tuple{typeof(LLVM.module_callback), Ptr{LLVM.API.LLVMOpaqueModule}, Ptr{Any}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Type})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, DataType}, Int64, Int64})
precompile(Tuple{typeof(GPUCompiler.cpu_features!), LLVM.Module})
precompile(Tuple{typeof(LLVM.function_callback), Ptr{LLVM.API.LLVMOpaqueValue}, Ptr{Any}})
precompile(Tuple{typeof(GPUCompiler.lower_gc_frame!), LLVM.Function})
precompile(Tuple{typeof(GPUCompiler.add_kernel_state!), LLVM.Module})
precompile(Tuple{typeof(Base.getindex), Array{LLVM.ConstantAsMetadata, 1}, Int64})
precompile(Tuple{Type{LLVM.Function}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.vect), LLVM.Function, Vararg{LLVM.Function}})
precompile(Tuple{Type{Base.Set{LLVM.Function}}, Array{LLVM.Function, 1}})
precompile(Tuple{typeof(Base.vect), LLVM.StructType, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.StructType, LLVM.StructType, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.LLVMType}, LLVM.StructType, LLVM.StructType, LLVM.LLVMDouble})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:value_map, :materializer, :changes), Tuple{Base.Dict{LLVM.Value, LLVM.Value}, GPUCompiler.var"#materializer#83"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.StructType}, LLVM.API.LLVMCloneFunctionChangeType}}, typeof(LLVM.clone_into!), LLVM.Function, LLVM.Function})
precompile(Tuple{Type{Base.RefValue{T} where T}, GPUCompiler.var"#materializer#83"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.StructType}})
precompile(Tuple{typeof(LLVM.API.LLVMCloneFunctionInto), LLVM.Function, LLVM.Function, Array{LLVM.Value, 1}, Int64, LLVM.API.LLVMCloneFunctionChangeType, String, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Base.RefValue{GPUCompiler.var"#materializer#83"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.StructType}}})
precompile(Tuple{typeof(LLVM.materializer_callback), Ptr{LLVM.API.LLVMOpaqueValue}, Base.RefValue{GPUCompiler.var"#materializer#83"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.StructType}}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{LLVM.ConstantAsMetadata, 1}})
precompile(Tuple{typeof(Base.unsigned), UInt32})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{LLVM.LLVMType, 1}, Array{LLVM.Value, 1}}}, Int64})
precompile(Tuple{GPUCompiler.var"#rewrite_uses!#84"{LLVM.FunctionType, LLVM.Function}, LLVM.Function, LLVM.FunctionType})
precompile(Tuple{GPUCompiler.var"#rewrite_uses!#84"{LLVM.FunctionType, LLVM.Function}, LLVM.ConstantExpr, LLVM.FunctionType})
precompile(Tuple{typeof(GPUCompiler.lower_kernel_state!), LLVM.Function})
precompile(Tuple{typeof(GPUCompiler.cleanup_kernel_state!), LLVM.Module})
precompile(Tuple{typeof(GPUCompiler.lower_ptls!), LLVM.Module})
precompile(Tuple{typeof(LLVM.unsafe_delete!), LLVM.BasicBlock, LLVM.CallInst})
precompile(Tuple{typeof(LLVM.add!), GPUCompiler.var"#18#20"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}}, LLVM.NewPMPassBuilder, LLVM.NewPMPassManager})
precompile(Tuple{typeof(GPUCompiler.nvvm_reflect!), LLVM.Function})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Ptr{Nothing}}, Nothing})
precompile(Tuple{typeof(GPUCompiler.check_ir), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, LLVM.Module})
precompile(Tuple{typeof(Base.in), LLVM.CallInst, Base.Set{LLVM.Instruction}})
precompile(Tuple{typeof(Base.push!), Base.Set{LLVM.Instruction}, LLVM.CallInst})
precompile(Tuple{Type{LLVM.DILocation}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{Type{LLVM.DISubProgram}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{typeof(LLVM.name), LLVM.DISubProgram})
precompile(Tuple{typeof(LLVM.line), LLVM.DILocation})
precompile(Tuple{Type{LLVM.AddInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.ZExtInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.MulInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.ExtractValueInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.ICmpInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(GPUCompiler.resolve_cpu_references!), LLVM.Module})
precompile(Tuple{typeof(GPUCompiler.mcgen), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, LLVM.Module, LLVM.API.LLVMCodeGenFileType})
precompile(Tuple{typeof(Base.pop!), Array{LLVM.ThreadSafeContext, 1}})
precompile(Tuple{typeof(Base.getproperty), CUDA.CUDACompilerParams, Symbol})
precompile(Tuple{typeof(Base.vect), Type{CUDA.KernelState}, Vararg{DataType}})
precompile(Tuple{typeof(Base.filter), CUDA.var"#1147#1150", Array{DataType, 1}})
precompile(Tuple{typeof(Base.reduce_empty), typeof(Base.:(+)), Type{DataType}})
precompile(Tuple{typeof(Base.reduce_empty), typeof(Base.add_sum), Type{DataType}})
precompile(Tuple{typeof(Base.sum), Function, Array{DataType, 1}})
precompile(Tuple{Type{UInt16}, UInt32})
precompile(Tuple{typeof(Base.:(~)), UInt16})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, Base._InitialValue, Array{DataType, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(Base.sizeof), typeof(Base.add_sum)}, Symbol})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.sizeof), typeof(Base.add_sum)}, Type{DataType}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.sizeof), typeof(Base.add_sum), Base.IndexLinear, Array{DataType, 1}})
precompile(Tuple{typeof(Base.setup_stdio), Base.Pipe, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Libc.RawFD, IO}, 1}, Base.PipeEndpoint, Int64})
precompile(Tuple{typeof(Base.setproperty!), Base.Process, Symbol, Base.DevNull})
precompile(Tuple{typeof(Base.getproperty), Base.Iterators.Enumerate{CUDA.DeviceIterator}, Symbol})
precompile(Tuple{CUDA.var"#1089#1091"})
precompile(Tuple{CUDA.var"#1151#1152"{Base.Pipe}})
precompile(Tuple{typeof(Base.strip), String})
precompile(Tuple{typeof(Base.strip), Base.SubString{String}})
precompile(Tuple{typeof(Base.isempty), Base.SubString{String}})
precompile(Tuple{typeof(LLVM.name), LLVM.Function})
precompile(Tuple{Type{CUDA.CUPTI.CUPTIError}, CUDA.CUPTI.CUptiResult})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{names, T} where T<:Tuple where names, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Vararg{Any, 6}})
precompile(Tuple{typeof(Base.haskey), Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:maxlog,), Tuple{Int64}}}, Symbol})
precompile(Tuple{typeof(Base.get!), Base.Dict{Any, Int64}, Symbol, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Int64}, Int64, Symbol})
precompile(Tuple{typeof(Base.isopen), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Vararg{Any, 5}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.PipeEndpoint})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String}})
precompile(Tuple{Base.var"##printstyled#995", Bool, Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :italic, :underline, :blink, :reverse, :hidden), NTuple{6, Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{Any}})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.get), Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Symbol, Nothing})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Vararg{Any, 6}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}}})
precompile(Tuple{typeof(Base.cconvert), Type, CUDA.libraryPropertyType})
precompile(Tuple{typeof(Base.unsafe_convert), Type{CUDA.libraryPropertyType}, CUDA.libraryPropertyType})
precompile(Tuple{Main.var"#2#4"{Int64, CUDA.CuArray{Float64, 3, CUDA.DeviceMemory}, CUDA.CuArray{Float64, 3, CUDA.DeviceMemory}, CUDA.CuArray{Float64, 3, CUDA.DeviceMemory}}})
precompile(Tuple{typeof(CUDA.CUBLAS.handle_ctor), CUDA.CuContext})
precompile(Tuple{Type{Pair{A, B} where B where A}, CUDA.CuContext, Ptr{CUDA.CUBLAS.cublasContext}})
precompile(Tuple{typeof(Base.push!), Base.Set{Pair{CUDA.CuContext, Ptr{CUDA.CUBLAS.cublasContext}}}, Pair{CUDA.CuContext, Ptr{CUDA.CUBLAS.cublasContext}}})
precompile(Tuple{GPUArrays.var"##s24#17", Vararg{Any, 7}})
precompile(Tuple{LLVM.Interop.var"##s607#9", Vararg{Any, 8}})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.LLVMType}, LLVM.PointerType, LLVM.IntegerType})
precompile(Tuple{typeof(LLVM.Interop.create_function), LLVM.LLVMDouble, Array{LLVM.LLVMType, 1}})
precompile(Tuple{typeof(LLVM.load!), LLVM.IRBuilder, LLVM.LLVMDouble, LLVM.GetElementPtrInst})
precompile(Tuple{typeof(LLVM.API.LLVMSetMetadata2), LLVM.LoadInst, LLVM.MDKind, LLVM.MetadataAsValue})
precompile(Tuple{typeof(LLVM.alignment!), LLVM.LoadInst, Int64})
precompile(Tuple{typeof(LLVM.ret!), LLVM.IRBuilder, LLVM.LoadInst})
precompile(Tuple{typeof(GPUCompiler.safe_name), Type{typeof(GPUArrays.getindex_kernel)}})
precompile(Tuple{typeof(Base.vect), Type{typeof(GPUArrays.getindex_kernel)}, Vararg{DataType}})
precompile(Tuple{Type{LLVM.TypeAttribute}, String, LLVM.ArrayType})
precompile(Tuple{typeof(LLVM.API.LLVMCreateTypeAttribute), LLVM.Context, UInt32, LLVM.ArrayType})
precompile(Tuple{typeof(Base.append!), Array{LLVM.Instruction, 1}, Array{LLVM.GetElementPtrInst, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{LLVM.BitCastInst}})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.BitCastInst, 1}, LLVM.BitCastInst, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{LLVM.BitCastInst, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Array{LLVM.Instruction, 1}}, Array{LLVM.BitCastInst, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{LLVM.CallInst}})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.CallInst, 1}, LLVM.CallInst, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{LLVM.CallInst, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.append!), Array{LLVM.Instruction, 1}, Array{LLVM.CallInst, 1}})
precompile(Tuple{typeof(LLVM.alloca!), LLVM.IRBuilder, LLVM.ArrayType})
precompile(Tuple{GPUCompiler.var"#check_user#82"{Base.Set{LLVM.Function}, Array{LLVM.Function, 1}}, LLVM.CallInst})
precompile(Tuple{typeof(Base.vect), LLVM.StructType})
precompile(Tuple{Type{LLVM.FunctionType}, LLVM.VoidType, Array{LLVM.StructType, 1}})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.LLVMType}, LLVM.StructType, LLVM.IntegerType})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.StructType, LLVM.IntegerType, Vararg{LLVM.IntegerType}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.IntegerType, LLVM.IntegerType, Vararg{LLVM.IntegerType}})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.LLVMType}, LLVM.StructType, LLVM.IntegerType, LLVM.IntegerType, Vararg{LLVM.IntegerType}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#114#115"{Array{LLVM.LLVMType, 1}}, Int64, LLVM.StructType, Vararg{LLVM.IntegerType, 4}})
precompile(Tuple{Type{LLVM.FunctionType}, LLVM.PointerType, Array{LLVM.LLVMType, 1}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.StructType, LLVM.ArrayType, Vararg{LLVM.ArrayType}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.ArrayType, LLVM.ArrayType, Vararg{LLVM.ArrayType}})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.SequentialType}, LLVM.StructType, LLVM.StructType, LLVM.StructType, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#114#115"{Array{LLVM.SequentialType, 1}}, Int64, LLVM.StructType, LLVM.StructType, LLVM.StructType, Vararg{LLVM.ArrayType, 4}})
precompile(Tuple{Type{LLVM.FunctionType}, LLVM.VoidType, Array{LLVM.SequentialType, 1}})
precompile(Tuple{GPUCompiler.var"#materializer#83"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.StructType}, LLVM.ConstantExpr})
precompile(Tuple{Type{LLVM.GlobalVariable}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.PointerNull}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.InlineAsm}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.called_operand), LLVM.CallInst})
precompile(Tuple{typeof(Base.vect), LLVM.CallInst})
precompile(Tuple{typeof(LLVM.call!), LLVM.IRBuilder, LLVM.FunctionType, LLVM.Function, Array{LLVM.CallInst, 1}, LLVM.OperandBundleIterator})
precompile(Tuple{typeof(LLVM.callconv!), LLVM.CallInst, UInt32})
precompile(Tuple{typeof(Base.vect), LLVM.CallInst, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.User}, LLVM.CallInst, LLVM.ConstantExpr})
precompile(Tuple{typeof(LLVM.call!), LLVM.IRBuilder, LLVM.FunctionType, LLVM.Function, Array{LLVM.User, 1}, LLVM.OperandBundleIterator})
precompile(Tuple{Type{LLVM.UnreachableInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.IntToPtrInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.AtomicCmpXchgInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{Base.Set{LLVM.DILocation}}})
precompile(Tuple{typeof(Base.push!), Base.Set{LLVM.DILocation}, LLVM.DILocation})
precompile(Tuple{typeof(Base._unique!), GPUCompiler.var"#149#152", Array{LLVM.Use, 1}, Array{LLVM.Use, 1}, Base.Set{LLVM.DILocation}, Int64})
precompile(Tuple{typeof(Base.:(∉)), LLVM.DILocation, Base.Set{LLVM.DILocation}})
precompile(Tuple{typeof(Base.in), LLVM.LoadInst, Base.Set{LLVM.Instruction}})
precompile(Tuple{typeof(Base.push!), Base.Set{LLVM.Instruction}, LLVM.LoadInst})
precompile(Tuple{Type{LLVM.SelectInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.PHIInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.UDivInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.SubInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(CUDA.unsafe_free!), CUDA.CuArray{Float64, 2, CUDA.DeviceMemory}})
precompile(Tuple{CUDA.CUBLAS.var"#1285#1289"{NamedTuple{(:device, :context, :stream, :math_mode, :math_precision), Tuple{CUDA.CuDevice, CUDA.CuContext, CUDA.CuStream, CUDA.MathMode, Symbol}}, Ptr{CUDA.CUBLAS.cublasContext}}, Task})
precompile(Tuple{Type{NamedTuple{(:skip_destroyed,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(CUDA.CUBLAS.handle_dtor), CUDA.CuContext, Ptr{CUDA.CUBLAS.cublasContext}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:msg,), Tuple{Nothing}}, typeof(Base.time_print), Base.PipeEndpoint, UInt64, Int64, Int64, Int64, UInt64, UInt64, Bool})
precompile(Tuple{typeof(Base.Ryu.writefixed), Float64, Int64})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.PipeEndpoint, Pair{Symbol, Array{Tuple{String, Int64}, 1}}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.PipeEndpoint}, Pair{Symbol, Module}})
precompile(Tuple{typeof(Main.stream_test)})
precompile(Tuple{Main.var"#6#8"{Int64, CUDA.CuArray{Float64, 3, CUDA.DeviceMemory}, CUDA.CuArray{Float64, 3, CUDA.DeviceMemory}, CUDA.CuArray{Float64, 3, CUDA.DeviceMemory}}})
precompile(Tuple{typeof(CUDA.unsafe_free!), CUDA.CuArray{Float64, 3, CUDA.DeviceMemory}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{CUDA.CUstream_st}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.getproperty), Base.CodeUnits{UInt8, String}, Symbol})
precompile(Tuple{typeof(CUDA.pool_free), CUDA.Managed{CUDA.DeviceMemory}})
precompile(Tuple{CUDA.var"##context!#990", Bool, typeof(CUDA.context!), CUDA.var"#1094#1095", CUDA.CuContext})
precompile(Tuple{CUDA.APIUtils.var"#6#8"{CUDA.APIUtils.HandleCache{CUDA.CuContext, Ptr{CUDA.CUBLAS.cublasContext}}}})
precompile(Tuple{CUDA.APIUtils.var"#6#8"{CUDA.APIUtils.HandleCache{Array{CUDA.CuContext, 1}, Ptr{CUDA.CUBLAS.cublasXtContext}}}})
precompile(Tuple{CUDA.APIUtils.var"#6#8"{CUDA.APIUtils.HandleCache{CUDA.CuContext, Ptr{CUDA.CUSPARSE.cusparseContext}}}})
precompile(Tuple{CUDA.APIUtils.var"#6#8"{CUDA.APIUtils.HandleCache{CUDA.CuContext, Ptr{CUDA.CUSOLVER.cusolverDnContext}}}})
precompile(Tuple{CUDA.APIUtils.var"#6#8"{CUDA.APIUtils.HandleCache{CUDA.CuContext, Ptr{CUDA.CUSOLVER.cusolverSpContext}}}})
precompile(Tuple{CUDA.APIUtils.var"#6#8"{CUDA.APIUtils.HandleCache{Tuple{CUDA.CuContext, CUDA.CUFFT.cufftType_t, Tuple{Vararg{Int64, N}} where N, Any}, Int32}}})
precompile(Tuple{CUDA.APIUtils.var"#6#8"{CUDA.APIUtils.HandleCache{CUDA.CuContext, CUDA.CURAND.RNG}}})
precompile(Tuple{CUDA.APIUtils.var"#6#8"{CUDA.APIUtils.HandleCache{CUDA.CuContext, GPUArrays.RNG}}})
